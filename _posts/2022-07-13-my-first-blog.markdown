---
layout: post
title:  "My First Blog"
date:   2022-07-13 15:21:10 +0530
author: Sahil Sharma
comments: true
---

<!-- # How I published my first blog -->
In this blog, I will talk about how I published my first blog for free using [github][github-home], [github-pages][github-pages] and [jekyll][jekyll-home].


## Steps to publish a blog

### 1. Create a new jekyll project
*  Install the prerequisite as mentioned in the [jekyll installation docs][jekyll-ins-docs] to setup the system for creating a jekyll project.
*  Create a new jekyll project by following the simple steps mentioned in the [docs][jekyll-qs].

Now after the above step you should have a working jekyll project in your system. If you are just gettings your hand dirty to check how this whole process works you can leave the code as it is for now. As the code is sufficient to publish a blog. Or if you want to customize this code you can do that also by following simple step by step tutorial available in jekyll [docs][jekyll-tutorail].

### 2. Push the code to github
* Create a [github][github-home] account if you do not have one already.
* Create an empty repository with a special name using your unique github username. e.g. if your github account username is `grumpyCat`, then create a repository having name as `grumpyCat.github.io`. You can create repository with any name you like but creating the repository with this name convention has a benefit which we will see while publishing the blog.
* Initialize a git repository in the directory containing the code generated by jekyll and then push the code to the github using the commands below:

  ```
  git init
  git commit -m "first commit"
  git branch -M main
  git remote add origin https://github.com/<github_username>/<repositoryName>.git
  git push -u origin main
  ```

### 3. Build the code using github actions
Till now we have created a sample project and also pushed the code to the github repository. But to deploy and publish it we need to build the project first which will generate static files. These static files can be deployed on any server of your choice. Since we are using Github Pages to deploy the code, We will use Github Actions to build project and generate static files. This will be an automated process which means the latest code will be build and deployed automatically once the code is committed to the github repository. It's easy to integrate Github Actions to build and deploy code generated using jekyll. Follow the steps below to integrate Github Actions

* Create a new folder in the source code with the name `.github` and create another folder inside the `.github` folder with the name `workflows`.
* Inside the `workflows` folder create a new file with the name `github-pages.yml`.
* Copy the below content and paste it to the `github-pages.yml` file

  ```yaml
  name: Build and deploy Jekyll site to GitHub Pages

  on:
    push:
      branches:
        - main # branch name which have all the required source code.

  jobs:
    build_and_deploy:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3

        # Use GitHub Actions' cache to cache dependencies on servers
        - uses: actions/cache@v2
          with:
            path: vendor/bundle
            key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
            restore-keys: |
              ${{ runner.os }}-gems-

        # Use GitHub Deploy Action to build and deploy to Github
        - uses: jeffreytse/jekyll-deploy-action@v0.3.1
          with:
            provider: 'github'
            token: ${{ secrets.GITHUB_TOKEN }} # It's your Personal Access Token(PAT)
            repository: ''             # Default is current repository
            branch: 'gh-pages'         # Default is gh-pages for github provider
            jekyll_src: './'           # Default is root directory
            jekyll_cfg: '_config.yml'  # Default is _config.yml
            jekyll_baseurl: ''         # Default is according to _config.yml
            bundler_ver: '>=0'         # Default is latest bundler version
            cname: ''                  # Default is to not use a cname
            actor: ''                  # Default is the GITHUB_ACTOR
            pre_build_commands: ''     # Installing additional dependencies (Arch Linux)
  ```
* Commit the above code in the repository `main` branch and this will trigger a Github Actions build by default.
* Go to the `Actions` Tab in the github repository and check if the job is running or not.

### 4. Publish Site using Github Pages
Now we have everything we need in order to publish our site and make it available on the internet for everyone to see. The only thing left is to configure Github Pages. Which can be done in few simple steps
* Once the Github Actions build is complete, Go to the `Settings` Tab in the github repository.
* In the left menu, select the `Pages` option.
* In the Github Pages option, there is an option to select `source`. In this  we need to select the branch which we will use to publish our site on the Github Pages.
* Select the `gh-pages` branch name and click `Save`.

You might wonder that we did not create a new branch named `gh-pages` but still a new branch with this name is available for selection. This happened because while configuring the Github Actions we provided the name of the branch which will be used to publish the site on the line number 28 in the `github-pages.yml` file. You can choose any branch name in the yml at this line but make sure that same branch name is configured in the Github Pages settings also.

After this step your site will be published on the internet and can be accessed using the link `https://grumpyCat.github.io`. Here `grumpyCat` is your unique github username. This link will also be visible in the Github Pages Settings if everything is configured correctly.

Now coming to the part why we named our repository in a specific way. If a user have multiple github repositories, then all of them can be published using Github Pages. But the link to access those published sites would be different. e.g. if you had created a repository with name `my-first-blog`, then the site published on the internet with Github Pages from this repository will be available at the link `https://grumpyCat.github.io/my-first-blog`. The name of the repository will appear in the URL. But if the repository is created with github username, then the public URL will be `https://<username>.github.io` only.

To read more about this please refer to the official docs of Github Pages available at [Github Pages Docs][github-pages-docs]

That's it for today's blog. If you liked it then do share your support by giving a star on my github repo. 

All of the code for this demonstrations is present in my github repo [personal-blog][my-code-repo]


[jekyll-home]: https://jekyllrb.com/
[github-home]: https://github.com/
[github-pages]: https://pages.github.com/
[jekyll-ins-docs]: https://jekyllrb.com/docs/installation/
[jekyll-qs]: https://jekyllrb.com/docs/
[jekyll-tutorail]: https://jekyllrb.com/docs/step-by-step/01-setup/
[github-pages-docs]: https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages
[my-code-repo]: https://github.com/sharma-sahil/personal-blog/tree/github-actions